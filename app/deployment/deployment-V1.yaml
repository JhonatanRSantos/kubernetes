apiVersion: apps/v1
kind: Deployment

metadata:
  name: gows

spec:
  selector:
    matchLabels:
      app: gows-app
      version: "1.0.0"

  replicas: 2

  template:
    metadata:
      labels:
        app: gows-app
        version: "1.0.0"

    spec:
      containers:
      - name: gows-app
        image: jhonatanrs/ms-backend-test:2.0.1

        resources:
          limits:
            # vCPU = 1000m (millicores)
            cpu: "1000m"
            memory: "256Mi"
        
        ports:
        - containerPort: 80

        envFrom:
          - configMapRef:
              name: gows-configmap
          - secretRef:
              name: gows-secrets

        # Executa sempre na inicialização do container antes do readinessProbe e livenessProbe.
        # Quando o startupProbe detectar que o container está ok ele libera a execução periodica do readinessProbe e livenessProbe.
        startupProbe:
          # Intervalo entre cada chamada do rediness
          periodSeconds: 3
          # Timeout das chamadas
          timeoutSeconds: 1
          # Total de falhas para considerar que o container não está pronto
          # Atenção: Quando o startupProbe atingir o limite de falhas ele vai considerar o container como não inicializado com sucesso.
          # Nesse caso podemos usar um número maior de falhas.
          failureThreshold: 30
          # Tempo máximo para considerar uma inicialização como falha: (nesse cenário)
          # 30 falhas * 3 segundos de intervalo entre chamadas = 90 segundos

          httpGet:
            path: /health
            # Porta do container
            port: 80

        # Executa periodicamente é remove oncontainer da rede em caso de alguma falha for detectada.
        # REMOVE O TRÁFEGO
        readinessProbe:
          # Intervalo entre cada chamada do rediness
          periodSeconds: 3
          # Timeout das chamadas
          timeoutSeconds: 1
          # Total de falhas para considerar que o container não está pronto
          failureThreshold: 1
          # Total de sucessos para considerar que o container está pronto
          successThreshold: 1
          # Delay para a execução da primeira chamada do rediness
          # initialDelaySeconds: 10

          httpGet:
            path: /health
            # Porta do container
            port: 80

        # Executa periodicamente é reinicializa o container em caso de alguma falha for detectada.
        # REINICIA O CONTAINER
        livenessProbe:
         # Intervalo entre cada chamada do liviness
          periodSeconds: 6
          # Timeout das chamadas
          timeoutSeconds: 1
          # Total de falhas para considerar que o container não está pronto
          failureThreshold: 1
          # Total de sucessos para considerar que o container está pronto
          successThreshold: 1
          # Delay para a execução da primeira chamada do liveness
          # initialDelaySeconds: 10

          httpGet:
            path: /health
            # Porta do container
            port: 80


        # env:
        #   - name: APP_VERSION
        #     valueFrom:
        #       configMapKeyRef:
        #         name: gows-configmap
        #         key: APP_VERSION

        #   - name: APP_PORT
        #     valueFrom:
        #       configMapKeyRef:
        #         name: gows-configmap
        #         key: APP_PORT

        volumeMounts:
          - mountPath: "/app/files"
            name: numbers-configmap
            readOnly: true

          - mountPath: "/app/ext"
            name:  files

      volumes:
        - name: files
          persistentVolumeClaim:
            claimName: gows

        - name: numbers-configmap
          configMap:
            name: numbers
            items:
              - key: numbers
                path: "numbers.txt"

---
apiVersion: v1
kind: Service

metadata:
  name: gows-service

spec:
  # Tipos suportados de serviços
  # ClusterIP, NodePort, LoadBalancer, Heeadless
  # NodePort tem um range de portas externas suportadas: 30000 - 32767
  type: ClusterIP
  selector:
    app: gows-app

  ports:
  - name: gows-http
    port: 80
    targetPort: 80
    # nodePort: 30000
